# This workflow will build a package using Maven and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#apache-maven-with-a-settings-path

name: build and push docker image to ECR

on:
  push:
    tags:
      - 'v*'

permissions:
  pull-requests: read # allows SonarQube to decorate PRs with analysis results

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        java: [ '17' ]

    steps:
    - name: Check out code
      uses: actions/checkout@v4
    - name: Set up JDK ${{matrix.java}}
      uses: actions/setup-java@v4
      with:
        java-version: ${{matrix.java}}
        distribution: 'adopt'
        cache: maven

    - name: Build with Maven
      run: mvn clean package

    - name: Official SonarQube Scan
  # You may pin to the exact commit or the version.
  # uses: SonarSource/sonarqube-scan-action@13990a695682794b53148ff9f6a8b6e22e43955e
      uses: SonarSource/sonarqube-scan-action@v3.1.0
      with:
        # Additional arguments to the sonar-scanner
        args: # optional
          -Dsonar.projectName=account
          -Dsonar.projectKey=account
          -Dsonar.java.binaries=target
        projectBaseDir: . # optional, default is .
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}   # Generate a token on SonarQube, add it to the secrets of this repo with the name SONAR_TOKEN (Settings > Secrets > Actions > add new repository secret)
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}   # add the URL of your instance to the secrets of this repo with the name SONAR_HOST_URL (Settings > Secrets > Actions > add new repository secret)

    - name: Kubectl tool installer
      uses: Azure/setup-kubectl@v4.0.0
      with:
        # Version of kubectl
        version: latest # default is latest

    - name: "Configure AWS Credentials" # Action for GitHub Actions
      uses: aws-actions/configure-aws-credentials@v4
      with:
        # AWS Region, e.g. us-east-2
        aws-region: ap-northeast-2
        # AWS Access Key ID. Provide this key if you want to assume a role using access keys rather than a web identity token.
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # optional
        # AWS Secret Access Key. Required if aws-access-key-id is provided.
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # optional

    - name: Amazon ECR "Login" Action for GitHub Actions
      # You may pin to the exact commit or the version.
      # uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: account
        IMAGE_TAG: ${{ github.ref_name }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Aqua Security Trivy
      uses: aquasecurity/trivy-action@0.29.0
      with:
        # image reference(for backward compatibility)
        image-ref: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # comma-separated list of vulnerability types (os,library)
        vuln-type: os,library
        # severities of vulnerabilities to be displayed
        severity: HIGH,CRITICAL
        format: table
        output: image.html

    - name: Update Image Tag Values
      run: |
        sed -i "s/^    tag: .*/    tag: ${IMAGE_TAG}/" k8s/deployment.yaml
      env:
        IMAGE_TAG: ${{ github.ref_name }}

    - name: Commit and Push
      run: |
        git config --global user.name 'ghkimdev'
        git config --global user.email 'ghkim.dev@gmail.com'
        git commit -am "update image in deployment.yaml"
        git push


